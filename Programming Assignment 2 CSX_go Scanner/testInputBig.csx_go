// test some character inputs
'n'
'a'
'k'
'\n'
'\\n'
'\\'
'"'
':
'
"'n'
"'n'"
'"n"'
// This file tests comments
@@ comment // comment @@ notcomment @@ comment @@ notcomment @@ 
multiple
lines
in
a
comment
@@ notcomment // comment
// comment @@ comment
notcomment
// this file is supposed to be as crazy as possible
10 = ~3-2+34"Very long String Literal asdfaASDfaFSDSDFGjasd;fjakldfjprocessor   : 0vendor_id   : AuthenticAMDcpu family   : 15model      : 35model name   : AMD Athlon(tm) 64 X2 Dual Core Processor 4200+stepping   : 2cpu MHz      : 2210.292cache size   : 512 KBphysical id   : 0siblings   : 2core id      : 0cpu cores   : 2apicid      : 0initial apicid   : 0fpu      : yesfpu_exception   : yescpuid level   : 1wp      : yesflags      : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt lm 3dnowext 3dnow rep_good pni lahf_lm cmp_legacybogomips   : 4420.58TLB size   : 1024 4K pagesclflush size   : 64cache_alignment   : 64address sizes   : 40 bits physical, 48 bits virtualpower management: ts fid vid ttpprocessor   : 1vendor_id   : AuthenticAMDcpu family   : 15model      : 35model name   : AMD Athlon(tm) 64 X2 Dual Core Processor 4200+stepping   : 2cpu MHz      : 2210.292cache size   : 512 KBphysical id   : 0siblings   : 2core id      : 1cpu cores   : 2apicid      : 1initial apicid   : 1fpu      : yesfpu_exception   : yescpuid level   : 1wp      : yesflags      : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt lm 3dnowext 3dnow rep_good pni lahf_lm cmp_legacybogomips   : 4420.46TLB size   : 1024 4K pagesclflush size   : 64cache_alignment   : 64address sizes   : 40 bits physical, 48 bits virtualpower management: ts fid vid ttp" // end of string literalVery big integer:
// Yes, that is /proc/cpuinfo on my desktop
factorial(1234)=

// Big enough? (calculated with bc)
'c''a''b''c''k''j''l''l''k'k'k'k'k'k'k'
Numbers with comments:
1233@@3444@@5444
largish, but in range numbers:
12345467
20000000
~20000000

identifier
iden//tifier
identi@@f@@notcomment@@i@@er
id3id4
id23
23id
iden"tifi"er
identif'er
// This file is intended to test integer recognition
1234
~462
// these next two should overflow
351684150168516518506350650350560352065132035020
~1651560651650635132035032020321658165168506501318
635~245
123+123
+142
// detects as integer and then an identifier
123k45
(
<
)
>
[
<=
]
>=
=
,
;
!
+
{
-
}
*
:
/
==
!=
&&
||

bool
false
break
if
write
char
int
class
read
const
continue
return
true
void
else
while

BOOL
FALSE
BREAK
IF
WRITE
CHAR
INT
CLASS
READ
CONST
CONTINUE
RETURN 
TRUE
VOID
ELSE
WHILE

VoiD
WhIle
ElSe
returN
conTinue
FalSE
// I think you get the idea
"This is a string"
"This string has a line break
in it"
"\n\r\\\""
"\"\\""
"String with numbers 123545"
"This string has a @@ comment @@ in it"
"This string has a // single line comment in it"
class test {
@@ sample test prog for proj #2 (scanner) --
   may not parse,  type-check or execute
   correctly @@

int i = 0 @@ init to 0@@;
int j = ~123;
int bigPos = 11111111111111111111111111111111111111;
int bigNeg = ~2222222222222222222222222222222222222;
bool ja = true;
bool nein = false;
char c = 'c';
char nl = '\n';
char tab = '\t';
char bslash = '\\';
char tic = '\'';
CONST ten = 10;
int ar[100];

void p(INT j) {@@
	@@write("Ans = ", j+1, "\n");
}

int f(int i){
        ar[i] = 100;
	ReturN i+1;
}

read(b);

if (b || true)
	b = b && false;
else	b = !(b || true);

L: while (i != 0) {
	i = i*i/2; break L;
	i = i/(i-2); continue L
}

if (i == 10 || i < 21 || i > ~17 || i != 123) {
	Print( i);
	p(17);
}

if (i >= f(~3) || i <= f(i-1))
	write( i , f(i) , "\n");

} // That's all folks
123 != 120+3
+12345 + 17
32168465168465168432168413013546531320513201
~32168465168465168432168413013546531320513201
'k'
'n'
BREAK
~345
myid
my2id
'\n'
'\t'
'\\'
"String String"
"\\"
"\\\n\r\t\\\" ' '' \" "
